// AUTO-GENERATED FILE. DO NOT EDIT BY HAND.
// Generated from SciPy 1.16.1 on 2025-08-21T22:25:23Z.
// Distribution: Beta
//
// This file is created by gen_scipy_tests.py and contains reference
// tests whose expected values are produced by SciPy at generation time.
//

// Each test compares our kernel outputs against SciPy with a per-test tolerance.
// NaN/Inf equality is handled by util::assert_slice_close.

mod util;
#[cfg(feature = "probability_distributions")]
mod scipy_gumbel_tests {
    use super::util::assert_slice_close;
    use simd_kernels::kernels::scientific::distributions::univariate::gumbell::{
        gumbel_cdf, gumbel_pdf, gumbel_quantile,
    };
    use minarrow::vec64;
    // use simd_kernels::kernels::scientific::distributions::continuous::gumbel::{gumbel_pdf, gumbel_cdf, gumbel_quantile};

    #[test]
    fn gumbel_pdf_standard() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.0045662814201279153,
            0.1793740787340172,
            0.36787944117144233,
            0.25464638004358248,
            0.11820495159314313,
            0.047369009677907907,
            0.0066926996775355137,
            4.5397868655649831e-05
        ];
        let got = gumbel_pdf(&x, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_shifted() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            1.0604803997042797e-22,
            3.8005425040443568e-08,
            0.0045662814201279153,
            0.1793740787340172,
            0.36787944117144233,
            0.25464638004358248,
            0.047369009677907907,
            0.00033535011160135499
        ];
        let got = gumbel_pdf(&x, 2.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_scaled() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.0896870393670086,
            0.15852096053897108,
            0.18393972058572117,
            0.16535214944520904,
            0.12732319002179124,
            0.089253259256560469,
            0.037808089958713258,
            0.0033463498387677568
        ];
        let got = gumbel_pdf(&x, 0.0, 2.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_shifted_scaled() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            5.0106957404011854e-173,
            2.1209607994085595e-22,
            0.0091325628402558305,
            0.73575888234288467,
            0.23640990318628627,
            0.035966459393427283,
            0.00067070022320270999,
            3.0459959025520719e-08
        ];
        let got = gumbel_pdf(&x, 1.0, 0.5, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_large_scale() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.067120711928688986,
            0.0720178934578454,
            0.07357588823428847,
            0.072210582954186003,
            0.068579751293546348,
            0.063402654550857945,
            0.050929276008716495,
            0.023640990318628628
        ];
        let got = gumbel_pdf(&x, 0.0, 5.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_small_scale() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.0,
            0.0,
            3.6787944117144233,
            0.00045397868655649829,
            2.061153618190205e-08,
            9.3576229688393102e-13,
            1.9287498479639177e-21,
            3.720075976020836e-43
        ];
        let got = gumbel_pdf(&x, 0.0, 0.1, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_negative_loc() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.25464638004358248,
            0.11820495159314313,
            0.047369009677907907,
            0.017983229696713642,
            0.0066926996775355137,
            0.0024726155730149077,
            0.00033535011160135499,
            2.2603242978978017e-06
        ];
        let got = gumbel_pdf(&x, -3.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_pdf_extended() {
        let x = vec64![-10.0, -5.0, -2.0, 0.0, 2.0, 5.0, 10.0, 15.0, 20.0];
        let expect = vec64![
            0.0,
            5.2054271084956425e-63,
            0.0045662814201279153,
            0.36787944117144233,
            0.11820495159314313,
            0.0066926996775355137,
            4.5397868655649831e-05,
            3.0590222692561048e-07,
            2.061153618190205e-09
        ];
        let got = gumbel_pdf(&x, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_standard_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.00061797898933109343,
            0.065988035845312543,
            0.36787944117144233,
            0.69220062755534639,
            0.87342301849311665,
            0.95143199290045344,
            0.99328470206784147,
            0.9999546011007987
        ];
        let got = gumbel_cdf(&x, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_shifted_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            1.9423376049564073e-24,
            1.8921786948382924e-09,
            0.00061797898933109343,
            0.065988035845312543,
            0.36787944117144233,
            0.69220062755534639,
            0.95143199290045344,
            0.99966459363339344
        ];
        let got = gumbel_cdf(&x, 2.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_scaled_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.065988035845312543,
            0.19229564554796491,
            0.36787944117144233,
            0.54523921189260505,
            0.69220062755534639,
            0.80001071300435356,
            0.92119365517551577,
            0.99328470206784147
        ];
        let got = gumbel_cdf(&x, 0.0, 2.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_shifted_scaled_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            6.2101364865661445e-176,
            1.9423376049564073e-24,
            0.00061797898933109343,
            0.36787944117144233,
            0.87342301849311665,
            0.98185107306166652,
            0.99966459363339344,
            0.99999998477002039
        ];
        let got = gumbel_cdf(&x, 1.0, 0.5, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_large_scale_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.22496179354991847,
            0.29481632072915814,
            0.36787944117144233,
            0.44099102594298267,
            0.51154483368904158,
            0.57763584425891568,
            0.69220062755534639,
            0.87342301849311665
        ];
        let got = gumbel_cdf(&x, 0.0, 5.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_small_scale_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.0,
            0.0,
            0.36787944117144233,
            0.9999546011007987,
            0.99999999793884642,
            0.99999999999990641,
            1.0,
            1.0
        ];
        let got = gumbel_cdf(&x, 0.0, 0.1, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_negative_loc_cdf() {
        let x = vec64![-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 5.0, 10.0];
        let expect = vec64![
            0.69220062755534639,
            0.87342301849311665,
            0.95143199290045344,
            0.98185107306166652,
            0.99328470206784147,
            0.99752431739275249,
            0.99966459363339344,
            0.99999773967314753
        ];
        let got = gumbel_cdf(&x, -3.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_extended_cdf() {
        let x = vec64![-10.0, -5.0, -2.0, 0.0, 2.0, 5.0, 10.0, 15.0, 20.0];
        let expect = vec64![
            0.0,
            3.5073891964646352e-65,
            0.00061797898933109343,
            0.36787944117144233,
            0.87342301849311665,
            0.99328470206784147,
            0.9999546011007987,
            0.99999969409772627,
            0.99999999793884642
        ];
        let got = gumbel_cdf(&x, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_cdf_extreme_cdf() {
        let x = vec64![-20.0, -10.0, -5.0, 0.0, 5.0, 10.0, 20.0, 30.0];
        let expect = vec64![
            0.0,
            0.0,
            3.5073891964646352e-65,
            0.36787944117144233,
            0.99328470206784147,
            0.9999546011007987,
            0.99999999793884642,
            0.99999999999990641
        ];
        let got = gumbel_cdf(&x, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_standard_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            -1.5271796258079011,
            -1.0971887003649488,
            -0.83403244524795572,
            -0.32663425997828094,
            0.36651292058166435,
            1.2458993237072382,
            2.2503673273124454,
            2.9701952490421637,
            4.6001492267765789
        ];
        let got = gumbel_quantile(&q, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_shifted_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            0.47282037419209888,
            0.90281129963505125,
            1.1659675547520443,
            1.673365740021719,
            2.3665129205816644,
            3.2458993237072384,
            4.2503673273124454,
            4.9701952490421633,
            6.6001492267765789
        ];
        let got = gumbel_quantile(&q, 2.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_scaled_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            -3.0543592516158022,
            -2.1943774007298975,
            -1.6680648904959114,
            -0.65326851995656188,
            0.7330258411633287,
            2.4917986474144764,
            4.5007346546248908,
            5.9403904980843274,
            9.2002984535531578
        ];
        let got = gumbel_quantile(&q, 0.0, 2.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_shifted_scaled_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            0.23641018709604944,
            0.45140564981752562,
            0.58298377737602214,
            0.8366828700108595,
            1.1832564602908322,
            1.6229496618536192,
            2.1251836636562227,
            2.4850976245210816,
            3.3000746133882894
        ];
        let got = gumbel_quantile(&q, 1.0, 0.5, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_large_scale_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            -7.6358981290395054,
            -5.4859435018247442,
            -4.1701622262397784,
            -1.6331712998914047,
            1.8325646029083218,
            6.2294966185361913,
            11.251836636562228,
            14.850976245210818,
            23.000746133882895
        ];
        let got = gumbel_quantile(&q, 0.0, 5.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_small_scale_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            -0.15271796258079012,
            -0.10971887003649489,
            -0.083403244524795583,
            -0.032663425997828094,
            0.036651292058166439,
            0.12458993237072383,
            0.22503673273124455,
            0.2970195249042164,
            0.46001492267765792
        ];
        let got = gumbel_quantile(&q, 0.0, 0.1, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_negative_loc_ppf() {
        let q = vec64![
            0.01,
            0.050000000000000003,
            0.10000000000000001,
            0.25,
            0.5,
            0.75,
            0.90000000000000002,
            0.94999999999999996,
            0.98999999999999999
        ];
        let expect = vec64![
            -4.5271796258079009,
            -4.0971887003649492,
            -3.8340324452479555,
            -3.326634259978281,
            -2.6334870794183356,
            -1.7541006762927618,
            -0.74963267268755462,
            -0.029804750957836301,
            1.6001492267765789
        ];
        let got = gumbel_quantile(&q, -3.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }

    #[test]
    fn gumbel_ppf_extreme_ppf() {
        let q = vec64![0.001, 0.01, 0.98999999999999999, 0.999];
        let expect = vec64![
            -1.9326447339160655,
            -1.5271796258079011,
            4.6001492267765789,
            6.9072550705237159
        ];
        let got = gumbel_quantile(&q, 0.0, 1.0, None, None).unwrap();
        assert_slice_close(&got, &expect, 1.0000000000000001e-15);
    }
}
